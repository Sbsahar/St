import os
import threading
import tempfile
import requests
from telethon import TelegramClient, events
import asyncio
from ste import bot, check_image_safety, send_violation_report, n2, TOKEN
    # ุจุงูู ุงูููุฏ ููุง

# ุนููู ุจูุงูุงุช Telethon (ุงุณุชุจุฏู API_ID ู API_HASH ุจุงูููู ุงูุฎุงุตุฉ ุจู)
API_ID = 21290600     # ุถุน API_ID ุงูุฎุงุต ุจู ููุง
API_HASH = "2bd56b3e7715ec5862d6f856047caa95"  # ุถุน API_HASH ุงูุฎุงุต ุจู ููุง

# ุฅูุดุงุก Telethon client ููุจูุช ุจุงุณุชุฎุฏุงู ููุณ TOKEN
client = TelegramClient('edited_monitor', API_ID, API_HASH).start(bot_token=TOKEN)
def run_telethon():
    loop = asyncio.new_event_loop()  
    asyncio.set_event_loop(loop)

    client = TelegramClient('edited_monitor', API_ID, API_HASH).start(bot_token=TOKEN)

    # ุงุณุชุฎุฏู asyncio.run ูุชุดุบูู ุงูุนููู
    asyncio.run(client.run_until_disconnected())
@client.on(events.MessageEdited(chats=lambda e: e.is_channel))
async def edited_handler(event):
    """
    ูุฐุง ุงููุนุงูุฌ ูุณุชูุจู ุงูุฑุณุงุฆู ุงููุนุฏูุฉ ูู ุงููููุงุช.
    ุฅุฐุง ูุงูุช ุชุญุชูู ุนูู ููุฏูุง (ุตูุฑุฉุ ููุฏููุ ุฃู ูุชุญุฑูุฉ) ูููู ุจุชูุฒูู ุงูููู ููุญุตู.
    """
    message = event.message  # ุงูุฑุณุงูุฉ ุงููุนุฏูุฉ (ูุฌุจ ุฃู ุชููู ูุญุฏุซุฉ)
    print(f"๐ ุชู ุชุนุฏูู ุฑุณุงูุฉ ูู ุงูููุงุฉ {message.chat.title}ุ ID: {message.id}")
    
    # ูุญุต ุงูุตูุฑ ุงููุนุฏูุฉ
    if message.photo:
        file_path = await message.download_media()
        if not file_path:
            return
        try:
            result = check_image_safety(file_path)
            os.remove(file_path)
            if result == 'nude':
                try:
                    bot.delete_message(message.chat_id, message.id)
                    send_violation_report(message.chat_id, message, "โ๏ธ ุตูุฑุฉ ูุนุฏูุฉ ุบูุฑ ูุงุฆูุฉ")
                    print("โ ุชู ุญุฐู ุตูุฑุฉ ูุนุฏูุฉ ุบูุฑ ูุงุฆูุฉ")
                except Exception as e:
                    print(f"โ ุฎุทุฃ ุฃุซูุงุก ุญุฐู ุงูุตูุฑุฉ ุงููุนุฏูุฉ: {e}")
        except Exception as e:
            print(f"โ ุฎุทุฃ ุฃุซูุงุก ูุญุต ุงูุตูุฑุฉ ุงููุนุฏูุฉ: {e}")
    
    # ูุญุต ุงูููุฏูููุงุช ุงููุนุฏูุฉ
    elif message.video:
        file_path = await message.download_media()
        if not file_path:
            return
        try:
            elapsed, nsfw_probs = n2.predict_video_frames(file_path)
            os.remove(file_path)
            if any(prob >= 0.5 for prob in nsfw_probs):
                try:
                    bot.delete_message(message.chat_id, message.id)
                    send_violation_report(message.chat_id, message, "โ๏ธ ููุฏูู ูุนุฏู ุบูุฑ ูุงุฆู")
                    print("โ ุชู ุญุฐู ููุฏูู ูุนุฏู ุบูุฑ ูุงุฆู")
                except Exception as e:
                    print(f"โ ุฎุทุฃ ุฃุซูุงุก ุญุฐู ุงูููุฏูู ุงููุนุฏู: {e}")
        except Exception as e:
            print(f"โ ุฎุทุฃ ุฃุซูุงุก ูุญุต ุงูููุฏูู ุงููุนุฏู: {e}")
    
    # ูุญุต ุงูุตูุฑ ุงููุชุญุฑูุฉ ุงููุนุฏูุฉ
    elif message.animation:
        file_path = await message.download_media()
        if not file_path:
            return
        try:
            elapsed, nsfw_probs = n2.predict_video_frames(file_path)
            os.remove(file_path)
            if any(prob >= 0.5 for prob in nsfw_probs):
                try:
                    bot.delete_message(message.chat_id, message.id)
                    send_violation_report(message.chat_id, message, "โ๏ธ ุตูุฑุฉ ูุชุญุฑูุฉ ูุนุฏูุฉ ุบูุฑ ูุงุฆูุฉ")
                    print("โ ุชู ุญุฐู ุตูุฑุฉ ูุชุญุฑูุฉ ูุนุฏูุฉ ุบูุฑ ูุงุฆูุฉ")
                except Exception as e:
                    print(f"โ ุฎุทุฃ ุฃุซูุงุก ุญุฐู ุงูุตูุฑุฉ ุงููุชุญุฑูุฉ ุงููุนุฏูุฉ: {e}")
        except Exception as e:
            print(f"โ ุฎุทุฃ ุฃุซูุงุก ูุญุต ุงูุตูุฑุฉ ุงููุชุญุฑูุฉ ุงููุนุฏูุฉ: {e}")

# ุฏุงูุฉ ูุชุดุบูู Telethon ูู ุฎูุท ูููุตู
def run_telethon():
    client.run_until_disconnected()
